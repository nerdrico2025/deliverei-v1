// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  ADMIN_EMPRESA
  CLIENTE
}

enum StatusPedido {
  PENDENTE
  CONFIRMADO
  EM_PREPARO
  SAIU_ENTREGA
  ENTREGUE
  CANCELADO
}

model Empresa {
  id              String   @id @default(uuid())
  nome            String
  slug            String   @unique
  subdominio      String   @unique
  ativo           Boolean  @default(true)
  whatsappNumero  String?  @map("whatsapp_numero")
  whatsappToken   String?  @map("whatsapp_token")
  asaasCustomerId String?  @map("asaas_customer_id")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  usuarios          Usuario[]
  produtos          Produto[]
  pedidos           Pedido[]
  carrinhos         Carrinho[]
  cupons            Cupom[]
  assinatura        Assinatura?
  pagamentos        Pagamento[]
  mensagensWhatsApp MensagemWhatsApp[]

  @@map("empresas")
}

model Usuario {
  id        String   @id @default(uuid())
  email     String   @unique
  senha     String
  nome      String
  role      Role     @default(CLIENTE)
  empresaId String?
  ativo     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  empresa      Empresa?       @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  pedidos      Pedido[]
  carrinho     Carrinho?
  avaliacoes   Avaliacao[]
  notificacoes Notificacao[]

  @@index([empresaId])
  @@map("usuarios")
}

model Produto {
  id        String   @id @default(uuid())
  nome      String
  descricao String?
  preco     Decimal  @db.Decimal(10, 2)
  imagem    String?
  ativo     Boolean  @default(true)
  empresaId String
  estoque   Int      @default(0)
  categoria String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  empresa       Empresa        @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  itensCarrinho ItemCarrinho[]
  itensPedido   ItemPedido[]
  avaliacoes    Avaliacao[]

  @@index([empresaId])
  @@index([ativo])
  @@map("produtos")
}

model Pedido {
  id               String        @id @default(uuid())
  numero           String        @unique
  status           StatusPedido  @default(PENDENTE)
  subtotal         Decimal       @db.Decimal(10, 2)
  desconto         Decimal       @default(0) @db.Decimal(10, 2)
  total            Decimal       @db.Decimal(10, 2)
  frete            Decimal       @default(0) @db.Decimal(10, 2)
  clienteId        String
  empresaId        String
  enderecoEntrega  String?
  formaPagamento   String?
  cupomDesconto    String?
  observacoes      String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  cliente           Usuario            @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  empresa           Empresa            @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  itens             ItemPedido[]
  avaliacoes        Avaliacao[]
  notificacoes      Notificacao[]
  pagamentos        Pagamento[]
  mensagensWhatsApp MensagemWhatsApp[]

  @@index([clienteId])
  @@index([empresaId])
  @@index([status])
  @@map("pedidos")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  usuarioId String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([usuarioId])
  @@index([token])
  @@map("refresh_tokens")
}

model Carrinho {
  id        String   @id @default(uuid())
  usuarioId String   @unique
  empresaId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  usuario Usuario        @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  empresa Empresa        @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  itens   ItemCarrinho[]

  @@index([usuarioId])
  @@index([empresaId])
  @@map("carrinhos")
}

model ItemCarrinho {
  id            String   @id @default(uuid())
  carrinhoId    String
  produtoId     String
  quantidade    Int      @default(1)
  precoUnitario Decimal  @db.Decimal(10, 2)
  observacoes   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  carrinho Carrinho @relation(fields: [carrinhoId], references: [id], onDelete: Cascade)
  produto  Produto  @relation(fields: [produtoId], references: [id], onDelete: Cascade)

  @@index([carrinhoId])
  @@index([produtoId])
  @@map("itens_carrinho")
}

model ItemPedido {
  id            String   @id @default(uuid())
  pedidoId      String
  produtoId     String
  quantidade    Int
  precoUnitario Decimal  @db.Decimal(10, 2)
  subtotal      Decimal  @db.Decimal(10, 2)
  observacoes   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  pedido  Pedido  @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
  produto Produto @relation(fields: [produtoId], references: [id], onDelete: Cascade)

  @@index([pedidoId])
  @@index([produtoId])
  @@map("itens_pedido")
}

model Cupom {
  id          String   @id @default(uuid())
  codigo      String   @unique
  descricao   String?
  tipo        String   // PERCENTUAL, VALOR_FIXO
  valor       Decimal  @db.Decimal(10, 2)
  valorMinimo Decimal? @map("valor_minimo") @db.Decimal(10, 2)
  dataInicio  DateTime @map("data_inicio")
  dataFim     DateTime @map("data_fim")
  ativo       Boolean  @default(true)
  usoMaximo   Int?     @map("uso_maximo")
  usoAtual    Int      @default(0) @map("uso_atual")
  empresaId   String   @map("empresa_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  empresa Empresa @relation(fields: [empresaId], references: [id], onDelete: Cascade)

  @@index([empresaId])
  @@index([codigo])
  @@map("cupons")
}

model Avaliacao {
  id         String   @id @default(uuid())
  nota       Int      // 1-5
  comentario String?
  produtoId  String   @map("produto_id")
  usuarioId  String   @map("usuario_id")
  pedidoId   String?  @map("pedido_id")
  createdAt  DateTime @default(now()) @map("created_at")

  produto Produto  @relation(fields: [produtoId], references: [id], onDelete: Cascade)
  usuario Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  pedido  Pedido?  @relation(fields: [pedidoId], references: [id], onDelete: SetNull)

  @@index([produtoId])
  @@index([usuarioId])
  @@index([pedidoId])
  @@map("avaliacoes")
}

model Notificacao {
  id        String   @id @default(uuid())
  titulo    String
  mensagem  String
  tipo      String   // PEDIDO, SISTEMA, PROMOCAO
  lida      Boolean  @default(false)
  usuarioId String   @map("usuario_id")
  pedidoId  String?  @map("pedido_id")
  createdAt DateTime @default(now()) @map("created_at")

  usuario Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  pedido  Pedido? @relation(fields: [pedidoId], references: [id], onDelete: SetNull)

  @@index([usuarioId])
  @@index([pedidoId])
  @@map("notificacoes")
}

model Assinatura {
  id                   String    @id @default(uuid())
  empresaId            String    @unique @map("empresa_id")
  empresa              Empresa   @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  plano                String    // BASICO, PROFISSIONAL, ENTERPRISE
  status               String    // ATIVA, CANCELADA, SUSPENSA, TRIAL
  stripeCustomerId     String?   @map("stripe_customer_id")
  stripeSubscriptionId String?   @map("stripe_subscription_id")
  dataInicio           DateTime  @map("data_inicio")
  dataFim              DateTime? @map("data_fim")
  valorMensal          Float     @map("valor_mensal")
  proximaCobranca      DateTime? @map("proxima_cobranca")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")

  pagamentos Pagamento[]

  @@index([empresaId])
  @@index([status])
  @@map("assinaturas")
}

model Pagamento {
  id              String       @id @default(uuid())
  empresaId       String       @map("empresa_id")
  empresa         Empresa      @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  assinaturaId    String?      @map("assinatura_id")
  assinatura      Assinatura?  @relation(fields: [assinaturaId], references: [id], onDelete: SetNull)
  pedidoId        String?      @map("pedido_id")
  pedido          Pedido?      @relation(fields: [pedidoId], references: [id], onDelete: SetNull)
  tipo            String       // ASSINATURA, PEDIDO
  metodo          String       // PIX, CARTAO, BOLETO
  status          String       // PENDENTE, APROVADO, RECUSADO, CANCELADO
  valor           Float
  asaasPaymentId  String?      @map("asaas_payment_id")
  asaasInvoiceUrl String?      @map("asaas_invoice_url")
  pixQrCode       String?      @map("pix_qr_code")
  pixCopyPaste    String?      @map("pix_copy_paste")
  boletoUrl       String?      @map("boleto_url")
  dataVencimento  DateTime?    @map("data_vencimento")
  dataPagamento   DateTime?    @map("data_pagamento")
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")

  @@index([empresaId])
  @@index([assinaturaId])
  @@index([pedidoId])
  @@index([status])
  @@map("pagamentos")
}

model WebhookLog {
  id         String   @id @default(uuid())
  origem     String   // STRIPE, ASAAS
  evento     String
  payload    Json
  processado Boolean  @default(false)
  erro       String?
  createdAt  DateTime @default(now()) @map("created_at")

  @@index([origem])
  @@index([processado])
  @@map("webhook_logs")
}

model MensagemWhatsApp {
  id         String   @id @default(uuid())
  empresaId  String   @map("empresa_id")
  empresa    Empresa  @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  pedidoId   String?  @map("pedido_id")
  pedido     Pedido?  @relation(fields: [pedidoId], references: [id], onDelete: SetNull)
  telefone   String
  mensagem   String
  tipo       String   // NOTIFICACAO, CHAT
  direcao    String   // ENVIADA, RECEBIDA
  status     String   // PENDENTE, ENVIADA, ENTREGUE, LIDA, ERRO
  whatsappId String?  @map("whatsapp_id")
  erro       String?
  createdAt  DateTime @default(now()) @map("created_at")

  @@index([empresaId])
  @@index([pedidoId])
  @@index([status])
  @@map("mensagens_whatsapp")
}
