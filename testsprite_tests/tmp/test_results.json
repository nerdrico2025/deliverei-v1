[
  {
    "projectId": "f0d02b2f-e779-4419-a094-fd6a45936eab",
    "testId": "4e699b4f-28ee-4fa8-ae28-e446f706f43c",
    "userId": "54189448-a071-70a4-095f-7593e82cddb9",
    "title": "TC001-User Login with Valid Credentials",
    "description": "Verify that a user can successfully log in with valid credentials, receive a JWT and tenant context, and be redirected appropriately.",
    "code": "import asyncio\nfrom playwright import async_api\nfrom playwright.async_api import expect\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:4179\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # -> Click on the login button to navigate to the login page\n        frame = context.pages[-1]\n        # Click on the 'Entrar' button to go to the login page\n        elem = frame.locator('xpath=html/body/div/div/header/div/a/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input valid username/email and password for Pizza Express admin and submit the form\n        frame = context.pages[-1]\n        # Input valid email for Pizza Express admin\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin@pizza-express.com')\n        \n\n        frame = context.pages[-1]\n        # Input valid password for Pizza Express admin\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[3]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('pizza123')\n        \n\n        frame = context.pages[-1]\n        # Click the Entrar button to submit login form\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # --> Assertions to verify final state\n        frame = context.pages[-1]\n        try:\n            await expect(frame.locator('text=Login Successful - JWT and Tenant Context Received').first).to_be_visible(timeout=30000)\n        except AssertionError:\n            raise AssertionError('Test case failed: User login was not successful, JWT and tenant context were not received, or user was not redirected to the storefront as expected.')\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Login test with valid credentials failed: no JWT token or tenant slug found, no redirection to storefront, and no error messages displayed. The login process did not complete successfully.",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/54189448-a071-70a4-095f-7593e82cddb9/1761084963360545//tmp/test_task/result.webm",
    "created": "2025-10-21T22:12:53.274Z",
    "modified": "2025-10-21T22:16:03.561Z"
  },
  {
    "projectId": "f0d02b2f-e779-4419-a094-fd6a45936eab",
    "testId": "40b03fee-1b3b-4050-a3bf-5adcd2e10ac7",
    "userId": "54189448-a071-70a4-095f-7593e82cddb9",
    "title": "TC008-Admin Dashboard Displays Accurate Sales Metrics",
    "description": "Verify that the admin dashboard loads and displays sales metrics, product popularity, and order statistics accurately according to database data and selected date filters.",
    "code": "import asyncio\nfrom playwright import async_api\nfrom playwright.async_api import expect\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:4179\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # -> Click the 'Entrar' button to start admin login process.\n        frame = context.pages[-1]\n        # Click the 'Entrar' button to initiate admin login.\n        elem = frame.locator('xpath=html/body/div/div/header/div/a/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Select 'Pizza Express' from the company dropdown, then input email and password, and click login.\n        frame = context.pages[-1]\n        # Input admin email\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin@pizza-express.com')\n        \n\n        frame = context.pages[-1]\n        # Input admin password\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/div[3]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('pizza123')\n        \n\n        frame = context.pages[-1]\n        # Click Entrar button to login as admin\n        elem = frame.locator('xpath=html/body/div/div/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Verify product popularity and order statistics charts load correctly, then apply varying date filters to test data updates.\n        frame = context.pages[-1]\n        # Click on 'Produtos' to check product popularity data.\n        elem = frame.locator('xpath=html/body/div/div/div/aside/nav/a[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Check for any visible date filter controls or reload the dashboard to attempt to trigger data loading.\n        await page.mouse.wheel(0, await page.evaluate('() => window.innerHeight'))\n        \n\n        # --> Assertions to verify final state\n        frame = context.pages[-1]\n        try:\n            await expect(frame.locator('text=Admin Dashboard Loaded Successfully').first).to_be_visible(timeout=1000)\n        except AssertionError:\n            raise AssertionError(\"Test case failed: The admin dashboard did not load correctly or display sales metrics, product popularity, and order statistics as expected according to the test plan.\")\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The admin dashboard was accessed successfully after login, but it failed to load or display sales metrics, product popularity, and order statistics. The page is empty with no visible data or charts, and no date filters were found to apply. No error messages were visible on the page. This indicates a failure in loading or rendering the dashboard data as per the task requirements.",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/54189448-a071-70a4-095f-7593e82cddb9/1761084989736227//tmp/test_task/result.webm",
    "created": "2025-10-21T22:12:53.281Z",
    "modified": "2025-10-21T22:16:29.890Z"
  }
]
